name: Backend Deployment with SonarQube

on:
  workflow_dispatch

permissions:
  id-token: write
  contents: read

env:
  ACR_NAME: acrtodoappdev01
  IMAGE_NAME: acrtodoappdev01.azurecr.io/dob_facts/dob_facts_be
  TAG: ${{ github.run_number }}
  SONAR_PROJECT_KEY: dob-fact-be
  SONAR_PROJECT_NAME: DOB_Facts_Application
  SONAR_HOST_URL: "http://135.235.249.164:9000/"

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£ Checkout repo
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2Ô∏è‚É£ Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    # 3Ô∏è‚É£ Cache Python dependencies
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # 4Ô∏è‚É£ Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install coverage pytest

    # 5Ô∏è‚É£ Run backend tests with coverage
    - name: Run backend tests
      run: |
        coverage run -m pytest backend/tests/test_server.py
        coverage xml -o coverage.xml
        coverage report

    # 6Ô∏è‚É£ Set up JDK 17 for SonarQube
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # 7Ô∏è‚É£ Run SonarScanner using official action
    - name: Run SonarScanner
      uses: SonarSource/sonarqube-scan-action@v2
      with:
        entryPoint: sonar-scanner
        args: >
          -Dproject.settings=sonar-project-backend.properties
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dsonar.projectName="${{ env.SONAR_PROJECT_NAME }}"
          -Dsonar.projectVersion=${{ github.run_number }}
          -Dsonar.sources=backend
          -Dsonar.python.coverage.reportPaths=backend/coverage.xml
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
    
    

    # 8Ô∏è‚É£ Docker Build & Push
    - name: Login to Azure Container Registry
      run: docker login ${{ env.ACR_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:${{ env.TAG }} -f Dockerfile.backend .
        docker push ${{ env.IMAGE_NAME }}:${{ env.TAG }}

    # 9Ô∏è‚É£ Update Kubernetes manifest
    - name: Update manifest with image details
      run: |
        sed -i "s|#__#IMAGE_NAME#__#|${{ env.IMAGE_NAME }}|g" k8s/backend-deployment.yaml
        sed -i "s|#__#IMAGE_TAG#__#|${{ env.TAG }}|g" k8s/backend-deployment.yaml

    # üîü Set up AKS context & deploy
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Azure Login
      uses: Azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: rg-todoapp-dev
        cluster-name: aks-todoapp-dev01

    - name: Deploy Backend to Kubernetes
      run: kubectl apply -f k8s/backend-deployment.yaml --record
