name: Backend Deployment with SonarQube

on:
  workflow_dispatch

permissions:              
  id-token: write
  contents: read   

env:
  ACRNAME: acrtodoappdev01
  IMAGENAME: acrtodoappdev01.azurecr.io/dob_facts/dob_facts_be
  TAG: ${{ github.run_number }}
  SONAR_PROJECT_KEY: dob-fact-be
  SONAR_PROJECT_NAME: DOB Facts Application
  SONAR_HOST_URL: "http://135.235.249.164:9000/"

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣ Checkout repo
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2️⃣ Set up Python and dependencies
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install coverage pytest

    # 3️⃣ Run backend tests and generate coverage
    - name: Run backend tests with coverage
      run: |
        coverage run -m pytest backend/test_server.py
        coverage xml -o coverage.xml
        coverage report

    # 4️⃣ Set up JDK 17
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # 5️⃣ Install and Run SonarScanner CLI
    - name: Run SonarScanner
      run: |
        curl -Lo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.1.3023-linux.zip
        unzip sonar-scanner-cli.zip
        export PATH=$PWD/sonar-scanner-4.8.1.3023-linux/bin:$PATH
        sonar-scanner \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.projectName="${{ env.SONAR_PROJECT_NAME }}" \
          -Dsonar.projectVersion=${{ github.run_number }} \
          -Dsonar.sources=backend \
          -Dsonar.python.coverage.reportPaths=coverage.xml \
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    # 6️⃣ Docker Build & Push
    - name: ACR Login
      run: docker login ${{ env.ACRNAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}

    - name: Build and Push Docker Image
      run: |
        docker build -t $IMAGENAME:$TAG -f Dockerfile.backend .
        docker push $IMAGENAME:$TAG

    # 7️⃣ Update Deployment Manifest
    - name: Update manifest with image details
      run: |
        sed -i "s|#__#IMAGE_NAME#__#|$IMAGENAME|g" k8s/backend-deployment.yaml
        sed -i "s|#__#IMAGE_TAG#__#|$TAG|g" k8s/backend-deployment.yaml

    # 8️⃣ Set up AKS context & deploy
    - name: Set up Kubernetes
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Azure Login
      uses: Azure/login@v2.3.0
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: rg-todoapp-dev
        cluster-name: aks-todoapp-dev01

    - name: Deploy Backend to Kubernetes
      run: kubectl apply -f k8s/backend-deployment.yaml
